db: test_zw
debugs:
cases:
  - id: 1
    desc: 算术表达式
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp", "c5 bool"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000, true]
    sql: select c1,c2+1,c3*1,c2-1,c3/2,c3%2, 1+ c5 from {0};
    expect:
      columns: ["c1 string","c2 + 1 int","c3 * 1 bigint","c2 - 1 int","c3 / 2 double","c3 % 2 bigint", "1 + c5 int"]
      rows:
        - ["aa",3,3,1,1.5,1,2]
  - id: 2
    desc: 布尔表达式
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
    sql: select c1,c2=1,c3==3,c2!=1,c3>3,c2>=2,c3<=3,c2<2 from {0};
    expect:
      columns: ["c1 string", "c2 = 1 bool", "c3 = 3 bool", "c2 != 1 bool", "c3 > 3 bool", "c2 >= 2 bool", "c3 <= 3 bool", "c2 < 2 bool"]
      rows:
        - ["aa",false,true,true,false,true,true,false]
  - id: 3
    desc: 逻辑表达式
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
    sql: select c1,c2=1 and c3==3,c2=1 && c3==3,c2=1 or c3==3,c2=1 || c3==3,!(c2=1) from {0};
    expect:
      columns: ["c1 string","c2 = 1 AND c3 = 3 bool" ,"c2 = 1 AND c3 = 3 bool","c2 = 1 OR c3 = 3 bool","c2 = 1 OR c3 = 3 bool","NOT (c2 = 1) bool"]
      rows:
        - ["aa",false,false,true,true,true]
  - id: 4
    desc: 算术表达式不使用数字类型
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
    sql: select c1+1 from {0};
    expect:
      success: false
  - id: 5
    desc: 算术表达式-timestamp
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp","c5 double"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000,2.3]
    sql: select c4+1,c5+1,c5*2,c5/2 from {0};
    expect:
      columns: ["c4 + 1 timestamp","c5 + 1 double","c5 * 2 double","c5 / 2 double"]
      rows:
        - [1590738989001,3.3,4.6,1.15]
  - id: 6
    desc: 算术表达式-date
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp","c5 date"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000,"2020-05-01"]
    sql: select c5+1 from {0};
    expect:
      success: false
  - id: 6
    desc: 算术表达式-timestamp*
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp","c5 date"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000,"2020-05-01"]
    sql: select c4*1 from {0};
    expect:
      success: false
  - id: 7
    desc: 布尔表达式-字符类型
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
    sql: select c1='aa' as f1 from {0};
    expect:
      columns: ["f1 bool"]
      rows:
        - [true]
  - id: 8
    desc: 布尔表达式-日期类型
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp","c5 date"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000,"2020-05-01"]
    sql: select c5='2020-05-01' as f1, c5 > '2020-04-02' as f2 , concat(c5, "") as c5_str from {0};
    expect:
      columns: ["f1 bool", "f2 bool", "c5_str string"]
      rows:
        - [true, true, "2020-05-01"]
  - id: 9
    desc: 逻辑表达式不使用布尔表达式
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp","c5 date"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000,"2020-05-01"]
    sql: select c2=2 and (c2-1) as f1 from {0};
    expect:
      columns: ["f1 bool"]
      rows:
        - [true]
  - id: 10
    desc: 逻辑表达式不使用布尔表达式!
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp","c5 date"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000,"2020-05-01"]
    sql: select !c2 as not_c2 from {0};
    expect:
      columns: ["not_c2 bool"]
      rows:
        - [false]
  - id: 11
    desc: 逻辑表达式不使用布尔表达式-常量
    inputs:
      - columns: ["c1 string","c2 int","c3 bigint","c4 timestamp","c5 date"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000,"2020-05-01"]
    sql: select c2==2 and false as flag1,!true as flag2 from {0};
    expect:
      columns: ["flag1 bool", "flag2 bool"]
      rows:
        - [false,false]
  - id: 12_1
    desc: SIMPLE CASE WHEN 表达式
    inputs:
      - columns: ["col1 int","col2 string", "col4 timestamp"]
        indexs: ["index1:col1:col4"]
        rows:
          - [1, "aa",1590738989000]
          - [2, "cc",1590738989000]
          - [3, "bb",1590738989000]
          - [4, "dd",1590738989000]
    sql: |
      select col1, col2, case col2
                        when 'aa' then 'apple'
                        else 'nothing'
                    end as case_f1 from {0};
    expect:
      columns: ["col1 int", "col2 string", "case_f1 string"]
      order: col1
      rows:
        - [1, "aa", "apple"]
        - [2, "cc", "nothing"]
        - [3, "bb", "nothing"]
        - [4, "dd", "nothing"]
  - id: 12_2
    desc: SIMPLE CASE WHEN 表达式无ELSE
    inputs:
      - columns: ["col1 int","col2 string", "col4 timestamp"]
        indexs: ["index1:col1:col4"]
        rows:
          - [1, "aa",1590738989000]
          - [2, "cc",1590738989000]
          - [3, "bb",1590738989000]
          - [4, "dd",1590738989000]
    sql: |
      select col1, col2, case col2
                        when 'aa' then 'apple'
                    end as case_f1 from {0};
    expect:
      columns: ["col1 int", "col2 string", "case_f1 string"]
      order: col1
      rows:
        - [1, "aa", "apple"]
        - [2, "cc", null]
        - [3, "bb", null]
        - [4, "dd", null]
  - id: 12_3
    desc: SIMPLE CASE WHEN 表达式 ELSE NULL
    inputs:
      - columns: ["col1 int","col2 string", "col4 timestamp"]
        indexs: ["index1:col1:col4"]
        rows:
          - [1, "aa",1590738989000]
          - [2, "cc",1590738989000]
          - [3, "bb",1590738989000]
          - [4, "dd",1590738989000]
    sql: |
      select col1, col2, case col2
                        when 'aa' then 'apple'
                        else NULL
                    end as case_f1 from {0};
    expect:
      columns: ["col1 int", "col2 string", "case_f1 string"]
      order: col1
      rows:
        - [1, "aa", "apple"]
        - [2, "cc", null]
        - [3, "bb", null]
        - [4, "dd", null]
  - id: 12_4
    desc: SIMPLE CASE WHEN 表达式 THEN NULL
    inputs:
      - columns: ["col1 int","col2 string", "col4 timestamp"]
        indexs: ["index1:col1:col4"]
        rows:
          - [1, "aa",1590738989000]
          - [2, "cc",1590738989000]
          - [3, "bb",1590738989000]
          - [4, "dd",1590738989000]
          - [5, null ,1590738989000]
    sql: |
      select col1, col2, case col2
                        when 'aa' then 'apple'
                        when 'bb' then NULL
                        when 'cc' then 'cake'
                        else 'nothing'
                    end as case_f1 from {0};
    expect:
      columns: ["col1 int", "col2 string", "case_f1 string"]
      order: col1
      rows:
        - [1, "aa", "apple"]
        - [2, "cc", "cake"]
        - [3, "bb", null]
        - [4, "dd", "nothing"]
        - [5, null, "nothing"]
  - id: 13_1
    desc: SEARCHED CASE WHEN 表达式
    inputs:
      - columns: ["col1 int","col2 string", "col4 timestamp"]
        indexs: ["index1:col1:col4"]
        rows:
          - [1, "aa",1590738989000]
          - [2, "cc",1590738989000]
          - [3, "bb",1590738989000]
          - [4, "dd",1590738989000]
    sql: |
      select col1, col2, case
                        when col2='aa' then 'apple'
                        when col2='bb' then 'banana'
                        when col2='cc' then 'cake'
                        else 'nothing'
                    end as case_f1 from {0};
    expect:
      columns: ["col1 int", "col2 string", "case_f1 string"]
      order: col1
      rows:
        - [1, "aa", "apple"]
        - [2, "cc", "cake"]
        - [3, "bb", "banana"]
        - [4, "dd", "nothing"]
  - id: 14_1
    desc: SEARCHED CASE WHEN 表达式无 ELSE
    inputs:
      - columns: ["col1 int","col2 string", "col4 timestamp"]
        indexs: ["index1:col1:col4"]
        rows:
          - [1, "aa",1590738989000]
          - [2, "cc",1590738989000]
          - [3, "bb",1590738989000]
          - [4, "dd",1590738989000]
    sql: |
      select col1, col2, case
                        when col2='aa' then 'apple'
                    end as case_f1 from {0};
    expect:
      columns: ["col1 int", "col2 string", "case_f1 string"]
      order: col1
      rows:
        - [1, "aa", "apple"]
        - [2, "cc", null]
        - [3, "bb", null]
        - [4, "dd", null]
  - id: 14_2
    desc: SEARCHED CASE WHEN 表达式 ELSE
    inputs:
      - columns: ["col1 int","col2 string", "col4 timestamp"]
        indexs: ["index1:col1:col4"]
        rows:
          - [1, "aa",1590738989000]
          - [2, "cc",1590738989000]
          - [3, "bb",1590738989000]
          - [4, "dd",1590738989000]
    sql: |
      select col1, col2, case
                        when col2='aa' then 'apple'
                        when col2='bb' then 'banana'
                        when col2='cc' then 'cake'
                        else 'nothing'
                    end as case_f1 from {0};
    expect:
      columns: ["col1 int", "col2 string", "case_f1 string"]
      order: col1
      rows:
        - [1, "aa", "apple"]
        - [2, "cc", "cake"]
        - [3, "bb", "banana"]
        - [4, "dd", "nothing"]

  - id: 15
    desc: 算数表达式操作数为null时返回null
    inputs:
      - columns: ["c1 int16","c2 int32","c3 bigint",
                  "c4 float","c5 double", "c6 timestamp", "c7 bool", "nullcol int32"]
        indexs: ["index1:c3:c6"]
        rows:
          - [1, 911, 1024, 3.14, 0.99, 1590738989000, true, NULL]
    sql: select
            c1 + nullcol as r1, c1 - nullcol as r2, c1 * nullcol as r3, c1 / nullcol as r4, c1 % nullcol as r5, c1 DIV nullcol as r6,
            c2 + nullcol as r7, c2 - nullcol as r8, c2 * nullcol as r9, c2 / nullcol as r10, c2 % nullcol as r11, c2 DIV nullcol as r12,
            c3 + nullcol as r13, c3 - nullcol as r14, c3 * nullcol as r15, c3 / nullcol as r16, c3 % nullcol as r17, c3 DIV nullcol as r18,
            c4 + nullcol as r19, c4 - nullcol as r20, c4 * nullcol as r21, c4 / nullcol as r22, c4 % nullcol as r23,
            c5 + nullcol as r25, c5 - nullcol as r26, c5 * nullcol as r27, c5 / nullcol as r28, c5 % nullcol as r29,
            year(c6) + nullcol as r31, year(c6) - nullcol as r32, year(c6) * nullcol as r33, year(c6) / nullcol as r34, year(c6) % nullcol as r35, year(c6) DIV nullcol as r36,
            -nullcol as r37,
            c7 + nullcol as r38, c7 - nullcol as r39, c7 * nullcol as r40, c7 / nullcol as r41, c7 % nullcol as r42
         from {0};
    expect:
      columns: ["r1 int32", "r2 int32", "r3 int32", "r4 double", "r5 int32", "r6 int32",
                "r7 int32", "r8 int32", "r9 int32", "r10 double", "r11 int32", "r12 int32",
                "r13 bigint", "r14 bigint", "r15 bigint", "r16 double", "r17 bigint", "r18 bigint",
                "r19 float", "r20 float", "r21 float", "r22 double", "r23 float",
                "r25 double", "r26 double", "r27 double", "r28 double", "r29 double",
                "r31 int32", "r32 int32", "r33 int32", "r34 double", "r35 int32", "r36 int32", "r37 int32",
                "r38 int32", "r39 int32", "r40 int32","r41 double","r42 int32"]
      rows:
        - [NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL]

  - id: 16
    desc: 三值bool逻辑
    inputs:
      - columns: ["id int64", "tt int64", "c1 bool", "c2 bool"]
        indexs: ["index1:id:tt"]
        rows:
          - [1, 1, true, true]
          - [2, 2, true, false]
          - [3, 3, true, NULL]
          - [4, 4, false, true]
          - [5, 5, false, false]
          - [6, 6, false, NULL]
          - [7, 7, NULL, true]
          - [8, 8, NULL, false]
          - [9, 9, NULL, NULL]
    sql: select id, c1, c2, c1 and c2 as c_and, c1 or c2 as c_or, c1 xor c2 as c_xor, not c1 as c_not from {0};
    expect:
      order: id
      columns: ["id int64", "c1 bool", "c2 bool", "c_and bool", "c_or bool", "c_xor bool", "c_not bool"]
      rows:
        - [1, true, true,  true, true, false, false]
        - [2, true, false,  false, true, true, false]
        - [3, true, NULL,  NULL, true, NULL, false]
        - [4, false, true,  false, true, true, true]
        - [5, false, false,  false, false, false, true]
        - [6, false, NULL,  false, NULL, NULL, true]
        - [7, NULL, true,  NULL, true, NULL, NULL]
        - [8, NULL, false,  false, NULL, NULL, NULL]
        - [9, NULL, NULL,  NULL, NULL, NULL, NULL]

  - id: 17
    desc: 直接和NULL比较返回NULL
    inputs:
      - columns: ["c1 int16","c2 int32","c3 bigint",
                  "c4 float","c5 double", "c6 timestamp", "c7 string",
                  "nullcol int32", "nulltime timestamp", "nullstr string"]
        indexs: ["index1:c3:c6"]
        rows:
          - [1, 911, 1024, 3.14, 0.99, 1590738989000, "str", NULL, NULL, NULL]
    sql: select
      c1 > nullcol as r1, c1 >= nullcol as r2, c1 < nullcol as r3, c1 <= nullcol as r4, c1 = nullcol as r5, c1 != nullcol as r6,
      c2 > nullcol as r7, c2 >= nullcol as r8, c2 < nullcol as r9, c2 <= nullcol as r10, c2 = nullcol as r11, c2 != nullcol as r12,
      c3 > nullcol as r13, c3 >= nullcol as r14, c3 < nullcol as r15, c3 <= nullcol as r16, c3 = nullcol as r17, c3 != nullcol as r18,
      c4 > nullcol as r19, c4 >= nullcol as r20, c4 < nullcol as r21, c4 <= nullcol as r22, c4 = nullcol as r23, c4 != nullcol as r24,
      c5 > nullcol as r25, c5 >= nullcol as r26, c5 < nullcol as r27, c5 <= nullcol as r28, c5 = nullcol as r29, c5 != nullcol as r30,
      c6 > nulltime as r31, c6 >= nulltime as r32, c6 < nulltime as r33, c6 <= nulltime as r34, c6 = nulltime as r35, c6 != nulltime as r36,
      c7 > nullstr as r37, c7 >= nullstr as r38, c7 < nullstr as r39, c7 <= nullstr as r40, c7 = nullstr as r41, c7 != nullstr as r42,
      nullstr > nullstr as r43, nullstr >= nullstr as r44, nullstr < nullstr as r45,
      nullstr <= nullstr as r46, nullstr = nullstr as r47, nullstr != nullstr as r48
      from {0};
    expect:
      columns: ["r1 bool", "r2 bool", "r3 bool", "r4 bool", "r5 bool", "r6 bool", "r7 bool", "r8 bool",
                "r9 bool", "r10 bool", "r11 bool", "r12 bool", "r13 bool", "r14 bool", "r15 bool", "r16 bool",
                "r17 bool", "r18 bool", "r19 bool", "r20 bool", "r21 bool", "r22 bool", "r23 bool", "r24 bool",
                "r25 bool", "r26 bool", "r27 bool", "r28 bool", "r29 bool", "r30 bool", "r31 bool", "r32 bool",
                "r33 bool", "r34 bool", "r35 bool", "r36 bool", "r37 bool", "r38 bool", "r39 bool", "r40 bool",
                "r41 bool", "r42 bool", "r43 bool", "r44 bool", "r45 bool", "r46 bool", "r47 bool", "r48 bool"]
      rows:
        - [NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL, NULL,
           NULL, NULL, NULL, NULL, NULL, NULL]

  - id: 18
    desc: 条件表达式null测试
    inputs:
      - columns: ["id int64", "c1 bool", "c2 string", "c3 string"]
        indexs: ["index1:id:id"]
        rows:
          - [1, true, "xxx", "aaa"]
          - [2, true, "xxx", NULL]
          - [3, true, NULL, "aaa"]
          - [4, true, NULL, NULL]
          - [5, false, "xxx", "aaa"]
          - [6, false, "xxx", NULL]
          - [7, false, NULL, "aaa"]
          - [8, false, NULL, NULL]
          - [9, NULL, "xxx", "aaa"]
          - [10, NULL, "xxx", NULL]
          - [11, NULL, NULL, "aaa"]
          - [12, NULL, NULL, NULL]
    sql: select id, case when c1 then c2 else c3 end as result from {0};
    expect:
      columns: ["id int64", "result string"]
      order: id
      rows:
        - [1, "xxx"]
        - [2, "xxx"]
        - [3, NULL]
        - [4, NULL]
        - [5, "aaa"]
        - [6, NULL]
        - [7, "aaa"]
        - [8, NULL]
        - [9, "aaa"]
        - [10, NULL]
        - [11, "aaa"]
        - [12, NULL]