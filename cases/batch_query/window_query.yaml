SQLCases:
  - id: 1
    desc: Window SQL
    mode: batch
    db: db1
    sql: |
      %%fun
      def test_sum(col:list<int>):int
          result = 0
          for x in col
              result += x
          return result
      end
      %%sql
      SELECT col2, col5, test_sum(col1) OVER w1 as w1_col1_sum, sum(col3) OVER w1 as w1_col3_sum,
      sum(col4) OVER w1 as w1_col4_sum, sum(col2) OVER w1 as w1_col2_sum,
      sum(col5) OVER w1 as w1_col5_sum, col1,
      col6 as col6 FROM t1
      WINDOW w1 AS (PARTITION BY t1.col2 ORDER BY t1.col5 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col2:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1, 1
          0, 2, 5, 2.2, 22.2, 2, 22
          1, 3, 55, 3.3, 33.3, 1, 333
          1, 4, 55, 4.4, 44.4, 2, 4444
          2, 5, 55, 5.5, 55.5, 3, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    output:
      schema: col2:int16, col5:int64, w1_col1_sum:int32, w1_col3_sum:float, w1_col4_sum:double, w1_col2_sum:int16, w1_col5_sum:int64, col1:int32, col6:string

      data: |
        55, 1, 3, 3.3, 33.3, 55, 1, 3, 333
        55, 2, 7, 7.7, 77.7, 110, 3, 4, 4444
        55, 3, 12, 13.2, 133.2, 165, 6, 5, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        5, 1, 1, 1.1, 11.1, 5, 1, 1, 1
        5, 2, 3, 3.3, 33.3, 10, 3, 2, 22
  - id: 2
    desc: Window SQL PK是字符串
    mode: batch
    db: db1
    sql: |
      %%fun
      def test_sum(col:list<int>):int
          result = 0
          for x in col
              result += x
          return result
      end
      %%sql
      SELECT col0, col5, test_sum(col1) OVER w1 as w1_col1_sum, sum(col3) OVER w1 as w1_col3_sum,
      sum(col4) OVER w1 as w1_col4_sum, sum(col2) OVER w1 as w1_col2_sum,
      sum(col5) OVER w1 as w1_col5_sum, col1,
      col6 as col6 FROM t1
      WINDOW w1 AS (PARTITION BY t1.col0 ORDER BY t1.col5 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col2:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1, 1
          0, 2, 5, 2.2, 22.2, 2, 22
          1, 3, 55, 3.3, 33.3, 1, 333
          1, 4, 55, 4.4, 44.4, 2, 4444
          2, 5, 55, 5.5, 55.5, 3, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    output:
      schema: col0:string, col5:int64, w1_col1_sum:int32, w1_col3_sum:float, w1_col4_sum:double, w1_col2_sum:int16, w1_col5_sum:int64, col1:int32, col6:string

      data: |
        2, 3, 5, 5.5, 55.5, 55, 3, 5, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        1, 1, 3, 3.3, 33.3, 55, 1, 3, 333
        1, 2, 7, 7.7, 77.7, 110, 3, 4, 4444
        0, 1, 1, 1.1, 11.1, 5, 1, 1, 1
        0, 2, 3, 3.3, 33.3, 10, 3, 2, 22
  - id: 3
    desc: 单行+两window+自定义聚合函数,w1命中索引
    mode: batch
    sql: |
      %%fun
      def test_sum(col:list<int>):int
          result = 0
          for x in col
              result += x
          return result
      end
      %%sql
      SELECT col2, col0, col5, test_sum(col1) OVER w1 as w1_col1_sum, sum(col3) OVER w1 as w1_col3_sum,
      sum(col4) OVER w2 as w2_col4_sum, sum(col2) OVER w2 as w2_col2_sum, sum(col5) OVER w2 as w2_col5_sum,
      col1, col6 as col6 FROM t1 WINDOW
      w1 AS (PARTITION BY col2 ORDER BY col5 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW),
      w2 AS (PARTITION BY col0 ORDER BY col5 RANGE BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        resource: cases/resource/simple_t1.yaml
        index: index2:col2:col5
    output:
      schema: col2:int16, col0:string, col5:int64, w1_col1_sum:int32, w1_col3_sum:float, w2_col4_sum:double, w2_col2_sum:int16, w2_col5_sum:int64, col1:int32, col6:string
      data: |
        55, 1, 1, 3, 3.3, 33.3, 55, 1, 3, 333
        55, 1, 2, 7, 7.7, 77.7, 110, 3, 4, 4444
        55, 2, 3, 12, 13.2, 55.5, 55, 3, 5, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        5, 0, 1, 1, 1.1, 11.1, 5, 1, 1, 1
        5, 0, 2, 3, 3.3, 33.3, 10, 3, 2, 22
  - id: 4
    desc: 单行+两window+自定义聚合函数，两个窗口均命中索引
    mode: batch
    sql: |
      %%fun
      def test_sum(col:list<int>):int
          result = 0
          for x in col
              result += x
          return result
      end
      %%sql
      SELECT col2, col0, col5, test_sum(col1) OVER w1 as w1_col1_sum, sum(col3) OVER w1 as w1_col3_sum,
      sum(col4) OVER w2 as w2_col4_sum, sum(col2) OVER w2 as w2_col2_sum, sum(col5) OVER w2 as w2_col5_sum,
      col1, col6 as col6 FROM t1 WINDOW
      w1 AS (PARTITION BY col2 ORDER BY col5 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW),
      w2 AS (PARTITION BY col0 ORDER BY col5 RANGE BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        resource: cases/resource/simple_t1.yaml
        index: index2:col2:col5,index0:col0:col5
    output:
      schema: col2:int16, col0:string, col5:int64, w1_col1_sum:int32, w1_col3_sum:float, w2_col4_sum:double, w2_col2_sum:int16, w2_col5_sum:int64, col1:int32, col6:string
      data: |
        55, 1, 1, 3, 3.3, 33.3, 55, 1, 3, 333
        55, 1, 2, 7, 7.7, 77.7, 110, 3, 4, 4444
        55, 2, 3, 12, 13.2, 55.5, 55, 3, 5, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        5, 0, 1, 1, 1.1, 11.1, 5, 1, 1, 1
        5, 0, 2, 3, 3.3, 33.3, 10, 3, 2, 22
  - id: 5
    desc: 单行+三个window+自定义聚合函数,w1和w2命中索引
    mode: batch
    sql: |
      %%fun
      def test_sum(col:list<int>):int
          result = 0
          for x in col
              result += x
          return result
      end
      %%sql
      SELECT col2, col0, col5, test_sum(col1) OVER w1 as w1_col1_sum, sum(col3) OVER w1 as w1_col3_sum,
      sum(col4) OVER w3 as w3_col4_sum, sum(col2) OVER w2 as w2_col2_sum, sum(col5) OVER w2 as w2_col5_sum,
      col1, col6 as col6 FROM t1 WINDOW
      w1 AS (PARTITION BY col2 ORDER BY col5 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW),
      w2 AS (PARTITION BY col0 ORDER BY col5 RANGE BETWEEN 3 PRECEDING AND CURRENT ROW),
      w3 AS (PARTITION BY col1 ORDER BY col5 RANGE BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        resource: cases/resource/simple_t1.yaml
        index: index2:col2:col5,index0:col0:col5
    output:
      schema: col2:int16, col0:string, col5:int64, w1_col1_sum:int32, w1_col3_sum:float, w3_col4_sum:double, w2_col2_sum:int16, w2_col5_sum:int64, col1:int32, col6:string
      data: |
        55, 1, 1, 3, 3.3, 33.3, 55, 1, 3, 333
        55, 1, 2, 7, 7.7, 44.4, 110, 3, 4, 4444
        55, 2, 3, 12, 13.2, 55.5, 55, 3, 5, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        5, 0, 1, 1, 1.1, 11.1, 5, 1, 1, 1
        5, 0, 2, 3, 3.3, 22.2, 10, 3, 2, 22
  - id: 6
    desc: Window SQL 双PK 均命中索引
    mode: batch
    db: db1
    sql: |
      %%fun
      def test_sum(col:list<int>):int
          result = 0
          for x in col
              result += x
          return result
      end
      %%sql
      SELECT col0, col2, col5, test_sum(col1) OVER w1 as w1_col1_sum, sum(col3) OVER w1 as w1_col3_sum,
      sum(col4) OVER w1 as w1_col4_sum, sum(col2) OVER w1 as w1_col2_sum,
      sum(col5) OVER w1 as w1_col5_sum, col1,
      col6 as col6 FROM t1
      WINDOW w1 AS (PARTITION BY t1.col0, t1.col2 ORDER BY t1.col5 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col0|col2:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1, 1
          0, 2, 5, 2.2, 22.2, 2, 22
          1, 3, 55, 3.3, 33.3, 1, 333
          1, 4, 55, 4.4, 44.4, 2, 4444
          2, 5, 55, 5.5, 55.5, 1, aaaaa
          2, 6, 55, 6.6, 66.6, 2, bbbbbb
          2, 7, 555, 7.7, 77.7, 3, ccccccc
          2, 8, 555, 8.8, 88.8, 4, dddddddd
          2, 9, 555, 9.9, 99.9, 5, eeeeeeeee
    output:
      schema: col0:string, col2:int16, col5:int64, w1_col1_sum:int32, w1_col3_sum:float, w1_col4_sum:double, w1_col2_sum:int16, w1_col5_sum:int64, col1:int32, col6:string

      data: |
        2, 55, 1, 5, 5.5, 55.5, 55, 1, 5, aaaaa
        2, 55, 2, 11, 12.1, 122.1, 110, 3, 6, bbbbbb
        0, 5, 1, 1, 1.1, 11.1, 5, 1, 1, 1
        0, 5, 2, 3, 3.3, 33.3, 10, 3, 2, 22
        2, 555, 3, 7, 7.7, 77.7, 555, 3, 7, ccccccc
        2, 555, 4, 15, 16.5, 166.5, 1110, 7,  8, dddddddd
        2, 555, 5, 24, 26.4, 266.4, 1665, 12, 9, eeeeeeeee
        1, 55, 1, 3, 3.3, 33.3, 55, 1, 3, 333
        1, 55, 2, 7, 7.7, 77.7, 110, 3, 4, 4444
  - id: 7
    desc: Window SQL 双PK col2未命中索引
    mode: batch
    db: db1
    sql: |
      %%fun
      def test_sum(col:list<int>):int
          result = 0
          for x in col
              result += x
          return result
      end
      %%sql
      SELECT col0, col2, col5, test_sum(col1) OVER w1 as w1_col1_sum, sum(col3) OVER w1 as w1_col3_sum,
      sum(col4) OVER w1 as w1_col4_sum, sum(col2) OVER w1 as w1_col2_sum,
      sum(col5) OVER w1 as w1_col5_sum, col1,
      col6 as col6 FROM t1
      WINDOW w1 AS (PARTITION BY t1.col0, t1.col2 ORDER BY t1.col5 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col0:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1, 1
          0, 2, 5, 2.2, 22.2, 2, 22
          1, 3, 55, 3.3, 33.3, 1, 333
          1, 4, 55, 4.4, 44.4, 2, 4444
          2, 5, 55, 5.5, 55.5, 1, aaaaa
          2, 6, 55, 6.6, 66.6, 2, bbbbbb
          2, 7, 555, 7.7, 77.7, 3, ccccccc
          2, 8, 555, 8.8, 88.8, 4, dddddddd
          2, 9, 555, 9.9, 99.9, 5, eeeeeeeee
    output:
      schema: col0:string, col2:int16, col5:int64, w1_col1_sum:int32, w1_col3_sum:float, w1_col4_sum:double, w1_col2_sum:int16, w1_col5_sum:int64, col1:int32, col6:string
      data: |
        2, 555, 3, 7, 7.7, 77.7, 555, 3, 7, ccccccc
        2, 555, 4, 15, 16.5, 166.5, 1110, 7,  8, dddddddd
        2, 555, 5, 24, 26.4, 266.4, 1665, 12, 9, eeeeeeeee
        2, 55, 1, 5, 5.5, 55.5, 55, 1, 5, aaaaa
        2, 55, 2, 11, 12.1, 122.1, 110, 3, 6, bbbbbb
        1, 55, 1, 3, 3.3, 33.3, 55, 1, 3, 333
        1, 55, 2, 7, 7.7, 77.7, 110, 3, 4, 4444
        0, 5, 1, 1, 1.1, 11.1, 5, 1, 1, 1
        0, 5, 2, 3, 3.3, 33.3, 10, 3, 2, 22
  - id: 8
    desc: Window SQL WITH UNION 样本表和UNION表的PK未命中
    mode: batch
    db: db1
    sql: |
      %%fun
      def test_sum(col:list<int>):int
          result = 0
          for x in col
              result += x
          return result
      end
      %%sql
      SELECT col2, col5, test_sum(col1) OVER w1 as w1_col1_sum, sum(col3) OVER w1 as w1_col3_sum,
      sum(col4) OVER w1 as w1_col4_sum, sum(col2) OVER w1 as w1_col2_sum,
      sum(col5) OVER w1 as w1_col5_sum, count(col1) as w1_col1_cnt, col1,
      col6 as col6 FROM t1
      WINDOW w1 AS (UNION t3 PARTITION BY t1.col2 ORDER BY t1.col5 ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col1:col5
        data: |
          0, 1, 5, 1.1, 11.1, 2, 1
          0, 2, 5, 2.2, 22.2, 4, 22
          1, 3, 55, 3.3, 33.3, 2, 333
          1, 4, 55, 4.4, 44.4, 4, 4444
          2, 5, 55, 5.5, 55.5, 6, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      - name: t3
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col1:col5
        data: |
          0, 1, 5, 1.0, 10.0, 1, x
          0, 2, 5, 2.0, 20.0, 3, xx
          1, 3, 55, 3.0, 30.0, 1, y
          1, 4, 55, 4.0, 40.0, 3, yy
          2, 5, 55, 5.0, 50.0, 5, yyy
          2, 6, 55, 6.0, 60.0, 7, yyyy
    output:
      schema: col2:int16, col5:int64, w1_col1_sum:int32, w1_col3_sum:float, w1_col4_sum:double, w1_col2_sum:int16, w1_col5_sum:int64, w1_col1_cnt:int64, col1:int32, col6:string
      data: |
        55, 2, 6, 6.3, 63.3, 110, 3, 2, 3, 333
        55, 4, 11, 11.7, 117.7, 165, 9, 3, 4, 4444
        55,6, 14, 14.9, 149.9, 165, 15, 3, 5, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
        5, 2, 2, 2.1, 21.1, 10, 3, 2, 1, 1
        5, 4, 5, 5.3, 53.3, 15, 9, 3, 2, 22