import "common.proto";
package rtidb.api;

option cc_generic_services = true;
option java_generic_services = true;
option java_package = "com._4paradigm.rtidb.tablet";
option java_outer_classname = "Tablet";

enum TableMode {
    kTableLeader = 1;
    kTableFollower = 2;
}

enum CompressType {
    kNoCompress = 0;
    kSnappy = 1;
}

enum TableState {
    kTableUndefined = 0;
    kTableNormal = 1;
    kTableLoading = 2;
    kMakingSnapshot = 3;
    kSnapshotPaused  = 4;
}

enum TabletState {
    kTabletOffline = 1;
    kTabletHealthy = 10;
}

enum TableType {
    // KV table 
    kKVTable = 1;
    // Time Series table
    kTSTable = 2;
}

enum TTLType {
    kAbsoluteTime = 1;
    kRelativeTime = 2;
    // keep the latest record
    kLatestTime = 3;
}

enum GetType {
    kSubKeyEq = 1;
    kSubKeyLt = 2;
    kSubKeyLe = 3;
    kSubKeyGt = 4;
    kSubKeyGe = 5;
}

enum OPType {
    kMakeSnapshotOP = 1;
    kAddReplicaOP = 2;
    kDelReplicaOP = 3;
    kChangeLeaderOP = 4;
    kOfflineReplicaOP = 5;
    kReAddReplicaOP = 6; 
    kReAddReplicaNoSendOP = 7;     // need not send snapshot
    kReAddReplicaWithDropOP = 8;   // should droptable before loadtable
    kReAddReplicaSimplifyOP = 9;   // table is exist, need run addreplica task only
    kUpdateTableAliveOP = 10;      // deleted
    kMigrateOP = 11;
    kReLoadTableOP = 12;
    kUpdatePartitionStatusOP = 13;
    kRecoverTableOP = 14;
}

enum TaskType {
    kMakeSnapshot = 1;
    kPauseSnapshot = 2;
    kRecoverSnapshot = 3;
    kSendSnapshot = 4;
    kLoadTable = 5;
    kAddReplica = 6;
    kAddTableInfo = 7;
    kDelReplica = 8;
    kDelTableInfo = 9;
    kChangeLeader = 10;
    kUpdatePartitionStatus = 11;
    kDropTable = 12;
    kUpdateTableAlive = 13;
    kUpdateTableInfo = 14;
    kSelectLeader = 15;
    kUpdateLeaderInfo = 16;
    kRecoverTable = 17;
    kCheckBinlogSyncProgress = 18;
}

enum TaskStatus {
    kInited = 1;
    kDoing = 2;
    kDone = 3;
    kFailed = 4;
    kCanceled = 5;
}

enum MethodType {
    kPut = 1;
    kDelete = 2;
}

message TaskInfo {
    required uint64 op_id = 1;
    required OPType op_type = 2;
    required TaskType task_type = 3;
    required TaskStatus status = 4;
    optional string endpoint = 5;
    optional bool is_rpc_send = 6 [default=false];
}

message OPInfo {
    required uint64 op_id = 1;
    required OPType op_type = 2;
    required uint32 task_index = 3;
    required string data = 4;
    optional TaskStatus task_status = 5;
    optional uint64 start_time = 6 [default = 0];
    optional uint64 end_time = 7 [default = 0];
    optional string name = 8;
    optional uint32 pid = 9;
    optional uint64 parent_id = 10;
    optional uint32 vec_idx = 11;   // the index in task_vec
}

message Manifest {
    optional uint64 offset = 1;
    optional string name = 2;
    optional uint64 count = 3;
    optional uint64 term = 4;
}

message Dimension {
    optional string key = 1;
    optional uint32 idx = 2;
}

message TSDimension {
    optional uint64 ts = 1;
    optional uint32 idx = 2;
}

message PutRequest {
	// the prefix key
    // abandoned
	optional string pk = 1;
	// the subfix key
	optional int64 time = 2;
	optional bytes value = 3;
	optional uint32 tid = 4;
    optional uint32 pid = 5;
    repeated Dimension dimensions = 6;
    repeated TSDimension ts_dimensions = 7;
}

message PutResponse {
	optional int32 code = 1;
	optional string msg = 2;
}

message DeleteRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
    optional string key = 3;
    optional string idx_name = 4;
}

message ExecuteGcRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
}

message GeneralRequest {
    required int32 tid = 1;
    required int32 pid = 2;
    optional TaskInfo task_info = 3;
}

message TaskStatusRequest {
}

message TaskStatusResponse {
	optional int32 code = 1;
	optional string msg = 2;
    repeated TaskInfo task = 3;
}

message DeleteTaskRequest {
	repeated uint64 op_id = 1;
}

message GeneralResponse {
	optional int32 code = 1;
	optional string msg = 2;
}

message ScanRequest {
    // the prefix key
    optional string pk = 1;
    // the start subfix key
    optional uint64 st = 2;
    // the end subfix key
    optional uint64 et = 3;
    optional uint32 limit = 4;
    optional RpcMetric metric = 5 [deprecated = true];
    optional uint32 tid = 6;
    optional uint32 pid = 7;
    optional bool enable_remove_duplicated_record = 8 [default=false];
    optional string idx_name = 9;
    optional string ts_name = 10;
    optional GetType st_type = 11 [default = kSubKeyLe];
    optional GetType et_type = 12 [default = kSubKeyGt];
    optional bool enable_remove_ts = 13 [default = false];
}

message RpcMetric {
	// the time start send rpc request
	optional int64 sqtime = 1;
	// the time server receive rpc request
	optional int64 rqtime = 2;
	// the time server start to caculate
	optional int64 sctime = 3;
	// the time server start send response
	optional int64 sptime = 4;
	// the time client receive response
	optional int64 rptime = 5;
	// the time server start first iterator
	optional int64 sitime = 6;
	// the time server start encode
	optional int64 setime = 7;
}

message TraverseRequest {
	optional uint32 tid = 1;
	optional uint32 pid = 2;
    optional string idx_name = 3;
	optional uint32 limit = 4 [default=100];
	optional string pk = 5;
	optional uint64 ts = 6;
    optional bool enable_remove_duplicated_record = 7 [default=false];
    optional string ts_name = 8;
}

message TraverseResponse {
	optional bytes pairs = 1;
	optional string msg = 2;
	optional int32 code = 3;
	optional uint32 count = 4;
    optional string pk = 5;
    optional uint64 ts = 6;
}

message ScanResponse {
	optional bytes pairs = 1;
	optional string msg = 2;
	optional int32 code = 3;
	optional uint32 count = 4;
	optional RpcMetric metric = 6 [deprecated = true];
}

message ReplicaRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
    optional string endpoint = 3;
    optional TaskInfo task_info = 4;
}

message AddReplicaResponse {
    optional int32 code = 1;
    optional string msg = 2;
}

message TableMeta {
	optional int32 tid = 1;
	optional string name = 2;
	optional int32 pid = 3;
	// time to live for every row
	optional uint64 ttl = 4;
	optional int32 seg_cnt = 5;
	optional TTLType ttl_type = 6 [default = kAbsoluteTime];
    // the slave endpoints
	repeated string replicas = 7;
	optional TableMode mode = 8;
    optional bool wal = 9; // unused
    // term for change role
    optional uint64 term = 10 [default = 0];
    optional bytes schema = 11 [deprecated = true];
    repeated string dimensions = 12 [deprecated = true];
    optional CompressType compress_type = 13;
    optional uint32 key_entry_max_height = 14;
    repeated rtidb.common.ColumnDesc column_desc = 15;
    repeated rtidb.common.ColumnKey column_key = 16;
    optional rtidb.common.StorageMode storage_mode = 17 [default = kMemory];
    repeated rtidb.common.ColumnDesc added_column_desc = 18;
}

message CreateTableRequest {
    optional TableMeta table_meta = 1;
}

message UpdateTableMetaForAddFieldRequest {
    required uint32 tid = 1;
    required rtidb.common.ColumnDesc column_desc = 2;
    required string schema = 3;
}
message CreateTableResponse {
	optional int32 code = 1;
	optional string msg = 2;
}

message LoadTableRequest {
    optional TableMeta table_meta = 1;
    optional TaskInfo task_info = 2;
}

message DropTableRequest {
	optional int32 tid = 1;
	optional int32 pid = 2;
    optional TaskInfo task_info = 3;
}

message DropTableResponse {
	optional int32 code = 1;
	optional string msg = 2;
}

message GetTableSchemaRequest {
    optional int32 tid = 1;
    optional int32 pid = 2;
}

message SetTTLClockRequest {
    optional int32 tid = 1;
    optional int32 pid = 2;
    optional uint64 timestamp = 3;
}

message SetExpireRequest {
    optional int32 tid = 1;
    optional int32 pid = 2;
    optional bool is_expire = 3;
}

message GetTableSchemaResponse {
    optional int32 code = 1;
    optional string msg = 2;
    optional bytes schema = 3;
    optional TableMeta table_meta = 4;
}

message UpdateTTLRequest {
    optional int32 tid = 1;
    optional int32 pid = 2;
    optional TTLType type = 3;
    optional uint64 value = 4;
    optional string ts_name = 5;
}

message UpdateTTLResponse {
    optional int32 code = 1;
    optional string msg = 2;
}

message SetConcurrencyRequest {
    optional string key = 1;
    optional int32 max_concurrency = 2;
}

message SetConcurrencyResponse {
    optional int32 code = 1;
    optional string msg = 2;
}

// raft protocol
message LogEntry {
    // term for leader
    optional uint64 term = 1;
    optional uint64 log_index = 2;
    optional string pk = 3;
    optional bytes value = 4;
    optional uint64 ts = 5;
    repeated Dimension dimensions = 6;
    optional MethodType method_type = 7;
    repeated TSDimension ts_dimensions = 8;
}

message AppendEntriesRequest {
    optional uint64 pre_log_index = 2;
    repeated LogEntry entries = 4;
    optional uint32 tid = 6;
    optional uint32 pid = 7;
    optional uint64 term = 8;
}

message AppendEntriesResponse {
    optional uint64 log_offset = 1;
    optional int32 code = 2;
    optional string msg = 3;
    optional uint64 term = 4;
}

message ChangeRoleRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
    optional uint64 term = 3;
    optional TableMode mode = 4;
    repeated string replicas = 5;
}

message SendSnapshotRequest {
    required uint32 tid = 1;
    required uint32 pid = 2;
    required string endpoint = 3;
    optional TaskInfo task_info = 4;
}

message SendDataRequest {
    required uint32 tid = 1;
    required uint32 pid = 2;
    required string file_name = 3;
    required uint64 block_id = 4;
    optional uint32 block_size = 5;
    optional bool eof = 6 [default = false];
    optional string dir_name = 7;
}

message ChangeRoleResponse {
    optional int32 code = 1;
    optional string msg = 2;
}

// Get all table status information on tablet
message GetTableStatusRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
    optional bool need_schema = 3 [default = false];
}

message TsIdxStatus {
    optional string idx_name = 1;
    repeated uint64 seg_cnts = 2;
}

// table status message
message TableStatus {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
    optional uint64 offset = 3;
    optional TableMode mode = 4;
    optional TableState state = 5;
    optional uint64 ttl = 6;
    optional bool is_expire = 7;
    optional int64 time_offset = 8;
    optional uint64 record_cnt = 9;
    optional uint64 idx_cnt = 10;
    repeated TsIdxStatus ts_idx_status = 11;
    optional string name = 12;
    optional uint64 record_byte_size = 13;
    optional uint64 record_idx_byte_size = 14;
    optional uint64 record_pk_cnt = 15;
    optional TTLType ttl_type = 16;
    optional CompressType compress_type = 17;
    optional uint32 skiplist_height = 18;
    optional bytes schema = 19;
    optional rtidb.common.StorageMode storage_mode = 20;
}

message GetTableStatusResponse {
    repeated TableStatus all_table_status = 1;
    optional int32 code = 2;
    optional string msg = 3;
}

message GetRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
    optional string key = 3;
    optional uint64 ts = 4 [default = 0];
    optional string idx_name = 5;
    optional GetType type = 6 [default = kSubKeyEq];
    optional string ts_name = 7;
    optional uint64 et = 8;
    optional GetType et_type = 9 [default = kSubKeyGe];
}

message GetResponse {
    optional int32 code = 1;
    optional string msg = 2;
    optional string key = 3;
    optional uint64 ts = 4;
    optional bytes value = 5;
}

message CountRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
    optional string idx_name = 3;
    optional string key = 4;
    optional bool filter_expired_data = 5 [default = false];
    optional string ts_name = 6;
    optional bool enable_remove_duplicated_record = 7 [default=false];
}    

message CountResponse {
    optional int32 code = 1;
    optional string msg = 2;
    optional uint32 count = 3;
}

message GetTermPairRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
}

message GetTermPairResponse {
    optional int32 code = 1;
    optional string msg = 2;
    optional uint64 term = 3;
    optional uint64 offset = 4;
    optional bool has_table = 5;
    optional bool is_leader = 6;
}

message GetManifestRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
}

message GetManifestResponse { 
    optional int32 code = 1;
    optional string msg = 2;
    optional Manifest manifest = 3;
}

message GetTableFollowerRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
}

message FollowerInfo {
    optional string endpoint = 1;
    optional uint64 offset = 2;
}

message GetTableFollowerResponse {
    optional int32 code = 1;
    optional string msg = 2;
    optional uint64 offset = 3;
    repeated FollowerInfo follower_info = 4;
}

message CheckFileRequest {
    optional uint32 tid = 1;
    optional uint32 pid = 2;
    optional string file = 3;
    optional uint64 size = 4;
    optional string dir_name = 5;
}

message ConnectZKRequest {}
message DisConnectZKRequest {}

message HttpRequest { }
message HttpResponse { }

service TabletServer {

    // write and read api for client
    rpc Put(PutRequest) returns (PutResponse);
    rpc Get(GetRequest) returns (GetResponse);
    rpc Scan(ScanRequest) returns (ScanResponse);
    rpc Delete(DeleteRequest) returns (GeneralResponse);
    rpc Count(CountRequest) returns (CountResponse);
    rpc Traverse(TraverseRequest) returns (TraverseResponse);

    // table api for master
    rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);
    rpc LoadTable(LoadTableRequest) returns(GeneralResponse);
    rpc DropTable(DropTableRequest) returns (DropTableResponse);
    rpc GetTableStatus(GetTableStatusRequest) returns (GetTableStatusResponse);
    rpc GetTableSchema(GetTableSchemaRequest) returns (GetTableSchemaResponse);
    rpc GetTableFollower(GetTableFollowerRequest) returns (GetTableFollowerResponse);
    rpc UpdateTTL(UpdateTTLRequest) returns (UpdateTTLResponse);
    rpc SetConcurrency(SetConcurrencyRequest) returns (SetConcurrencyResponse);
    rpc ExecuteGc(ExecuteGcRequest) returns (GeneralResponse);

    // replication api for master
    rpc AppendEntries(AppendEntriesRequest) returns(AppendEntriesResponse);
    rpc AddReplica(ReplicaRequest) returns(AddReplicaResponse);
    rpc DelReplica(ReplicaRequest) returns(GeneralResponse);
    rpc ChangeRole(ChangeRoleRequest) returns(ChangeRoleResponse);
    rpc MakeSnapshot(GeneralRequest) returns(GeneralResponse);
    rpc PauseSnapshot(GeneralRequest) returns(GeneralResponse);
    rpc RecoverSnapshot(GeneralRequest) returns(GeneralResponse);
    rpc SendSnapshot(SendSnapshotRequest) returns(GeneralResponse);

    rpc SendData(SendDataRequest) returns(GeneralResponse);

    rpc SetExpire(SetExpireRequest) returns(GeneralResponse);
    rpc SetTTLClock(SetTTLClockRequest) returns(GeneralResponse);

    // name server interface
    rpc GetTaskStatus(TaskStatusRequest) returns(TaskStatusResponse);
    rpc DeleteOPTask(DeleteTaskRequest) returns(GeneralResponse);
    rpc GetTermPair(GetTermPairRequest) returns(GetTermPairResponse);
    rpc GetManifest(GetManifestRequest) returns(GetManifestResponse);
    rpc CheckFile(CheckFileRequest) returns(GeneralResponse);
    rpc DeleteBinlog(GeneralRequest) returns(GeneralResponse);
    rpc ShowMemPool(HttpRequest) returns (HttpResponse);
    rpc ConnectZK(ConnectZKRequest) returns (GeneralResponse);
    rpc DisConnectZK(DisConnectZKRequest) returns (GeneralResponse);
    rpc UpdateTableMetaForAddField (UpdateTableMetaForAddFieldRequest) returns (GeneralResponse);
}
