import "common.proto";
import "tablet.proto";
import "type.proto";
package rtidb.nameserver;

option cc_generic_services = true;
option java_package = "com._4paradigm.rtidb.ns";
option java_outer_classname = "NS";

enum CompressType {
    kNoCompress = 0;
    kSnappy = 1;
}

enum ServerMode {
    kNORMAL = 0;
    kLEADER = 1;
    kFOLLOWER = 2;
}

enum ClusterStatus {
    kClusterHealthy = 0;
    kClusterOffline = 1;
    kClusterRemove = 2;
}

message ColumnDesc {
    required string name = 1;
    required string type = 2;
    required bool add_ts_idx = 3;
}

message PartitionMeta {
    required string endpoint = 1;
    required bool is_leader = 2;
    optional bool is_alive = 3 [default = true];
    optional uint64 offset = 4;
    optional uint64 record_cnt = 5;
    optional uint64 record_byte_size = 6;
    optional bool tablet_has_partition = 7 [default = true];
    optional uint64 diskused = 8 [default = 0];
    optional uint32 remote_tid = 9 [default = 4294967295]; // 4294967295 is UINT32 max value
    optional string alias = 10;
}

message TermPair {
    required uint64 term = 1;
    required uint64 offset = 2;
}

message TablePartition {
    required uint32 pid = 1;
    repeated PartitionMeta partition_meta = 2;
    repeated TermPair term_offset = 3;
    optional uint64 record_cnt = 4;
    optional uint64 record_byte_size = 5;
    optional uint64 diskused = 6 [default = 0];
    repeated PartitionMeta remote_partition_meta = 7;
}

message UpdateTTLRequest {
    optional string name = 1;
    optional string ttl_type = 2 [default = "kAbsoluteTime", deprecated = true];
    optional uint64 value = 3 [default = 0, deprecated = true];
    optional string ts_name = 4;
    optional rtidb.api.TTLDesc ttl_desc = 5;
}

message UpdateTTLResponse {
    optional int32 code = 1;
    optional string msg = 2;
}

message TableInfo {
    optional string name = 1;
    optional uint64 ttl = 2 [default = 0, deprecated = true];
    optional uint32 seg_cnt = 3 [default = 8];
    repeated TablePartition table_partition = 4;
    optional uint32 tid = 5;
    repeated ColumnDesc column_desc = 6 [deprecated = true];
    optional string ttl_type = 7 [default = "kAbsoluteTime", deprecated = true];
    optional uint32 partition_num = 8;
    optional uint32 replica_num = 9; // contain the leader
    optional CompressType compress_type = 10 [default = kNoCompress];
    optional uint32 key_entry_max_height = 11;
    repeated rtidb.common.ColumnDesc column_desc_v1 = 12;
    repeated rtidb.common.ColumnKey column_key = 13;
    optional rtidb.common.StorageMode storage_mode = 14 [default = kMemory];
    repeated rtidb.common.ColumnDesc added_column_desc = 15;
    optional rtidb.api.TTLDesc ttl_desc = 16;
    optional rtidb.type.TableType table_type = 17 [default = kTimeSeries];
    optional uint32 format_version = 18 [default = 0];
}

message CreateTableRequest {
    required TableInfo table_info = 1;
    optional ZoneInfo zone_info = 2;
    optional rtidb.api.TaskInfo task_info = 3;
}

message DropTableRequest {
    required string name = 1;
    optional ZoneInfo zone_info = 2;
    optional rtidb.api.TaskInfo task_info = 3;
}

message LoadTableRequest {
    optional string name = 1;
    optional string endpoint = 2;
    optional uint32 pid = 3;
    optional ZoneInfo zone_info = 4;
    optional rtidb.api.TaskInfo task_info = 5;
}

message CreateTableInfoRequest {
    optional TableInfo table_info = 1;
    optional ZoneInfo zone_info = 2;
}

message ShowTableRequest {
    optional string name = 1;
    optional string db = 2;
}

message ShowTableResponse {
    repeated TableInfo table_info = 1;
    required int32 code = 2;
    optional string msg = 3;
}

message MakeSnapshotNSRequest {
    required string name = 1;
    required uint32 pid = 2;
    optional uint64 offset = 3;
}

message AddReplicaData {
    required string name = 1;
    required uint32 pid = 2;
    optional string endpoint = 3;
    optional uint32 remote_tid = 4; //for remote
    optional string alias = 5; //for remote 
    optional TablePartition table_partition = 6; //for remote
}

message AddReplicaNSRequest {
    required string name = 1;
    required uint32 pid = 2;
    required string endpoint = 3;
    repeated uint32 pid_group = 4;
    repeated string endpoint_group = 5; //for remote
    optional ZoneInfo zone_info = 6; //for remote
    optional rtidb.api.TaskInfo task_info = 7; //for remote
}

message Pair {
    required string key = 1;
    required string value = 2;
}

message ConfSetRequest {
    required Pair conf = 1;
}

message ConfGetRequest {}

message ConfGetResponse {
    required int32 code = 1;
    optional string msg = 2;
    repeated Pair conf = 3;
}

message ChangeLeaderRequest {
    required string name = 1;
    required uint32 pid = 2;
    optional string candidate_leader = 3;
}

message OfflineEndpointRequest {
    required string endpoint = 1;
    optional uint32 concurrency = 2;
}

message RecoverEndpointRequest {
    required string endpoint = 1;
    optional bool need_restore = 2;
    optional uint32 concurrency = 3;
}

message GeneralResponse {
    required int32 code = 1;
    optional string msg = 2;
}

message CreateTableInfoResponse {
    optional TableInfo table_info = 1;
    required int32 code = 2;
    optional string msg = 3;
}

message ShowTabletRequest {}

message AddTableFieldRequest {
    optional string name = 1;
    optional rtidb.common.ColumnDesc column_desc = 2;
}

message TabletStatus {
    optional string endpoint = 1;
    optional string state = 2;
    optional uint64 age = 3;
}

message ShowTabletResponse {
    repeated TabletStatus tablets = 1;
    optional int32 code = 2;
    optional string msg = 3;
}

message RecoverTableRequest {
    required string name = 1;
    required uint32 pid = 2;
    required string endpoint = 3;
}

message DelReplicaNSRequest {
    required string name = 1;
    required uint32 pid = 2;
    required string endpoint = 3;
    repeated uint32 pid_group = 4;
}

message MigrateRequest {
    required string src_endpoint = 1;
    required string name = 2;
    repeated uint32 pid = 3;
    required string des_endpoint = 4;
}

message MigrateInfo {
    optional string src_endpoint = 1;
    optional string des_endpoint = 2;
}

message EndpointStatusData {
    optional string endpoint = 1;
    optional bool is_leader = 2;
    optional bool is_alive = 3;
}

message RecoverTableData {
    optional string endpoint = 1;
    optional uint64 offset_delta = 2;
    optional bool is_leader = 3;
    optional uint32 concurrency = 4;
}

message CreateTableData {
    optional string alias = 1;
    optional TableInfo table_info = 2;
    optional TableInfo remote_table_info = 3;
}

message ChangeLeaderData {
    optional string name = 1;
    optional uint32 tid = 2;
    optional uint32 pid = 3;
    optional uint64 term = 4;
    optional uint64 offset = 5;
    optional string leader = 6;
    repeated string follower = 7;
    optional string candidate_leader = 8;
    repeated rtidb.common.EndpointAndTid remote_follower = 9;
}

message OPStatus {
    required uint64 op_id = 1;
    required string op_type = 2;
    required string status = 3;
    required uint64 start_time = 4;
    required uint64 end_time = 5;
    required string task_type = 6;
    optional string name = 7;
    optional uint32 pid = 8;
    optional int32 for_replica_cluster = 9 [default = 0];   
}

message GetTablePartitionRequest {
    optional string name = 1;
    optional uint32 pid = 2;
}

message GetTablePartitionResponse {
    optional int32 code = 1;
    optional string msg = 2;
    optional TablePartition table_partition = 3;
}

message SetTablePartitionRequest {
    optional string name = 1;
    optional TablePartition table_partition = 2;
}

message UpdateTableAliveRequest {
    optional string name = 1;
    optional string endpoint = 2;
    optional uint32 pid = 3;
    optional bool is_alive = 4;
}

message ShowOPStatusRequest{
    optional string name = 1;
    optional uint32 pid = 2;
}

message ConnectZKRequest {}
message DisConnectZKRequest {}

message ShowOPStatusResponse {
    optional int32 code = 1;
    optional string msg = 2;
    repeated OPStatus op_status = 3;
}

message CancelOPRequest {
    optional uint64 op_id = 1;
}

message ClusterAddress {
    optional string zk_endpoints = 1;
    optional string zk_path = 2;
    optional string alias = 3;
}

message GeneralRequest {}

message ClusterAddAge {
    optional ClusterAddress replica = 1;
    optional uint64 age = 2;
    optional string state = 3;
}
message ShowReplicaClusterResponse {
    repeated ClusterAddAge replicas = 1;
    optional int32 code = 2;
    optional string msg = 3;
}

message RemoveReplicaOfRequest {
    optional string alias = 1;
}

message ReplicaClusterByNsRequest {
    optional ZoneInfo zone_info = 1;
}

message ZoneInfo {
    optional string zone_name = 1;
    optional string replica_alias = 2;
    optional uint64 zone_term = 3;
    optional ServerMode mode = 4;
}

message AddReplicaClusterByNsResponse {
    repeated TabletStatus tablets = 1;
    repeated TableInfo table_info = 2;
    required int32 code = 3;
    optional string msg = 4;
}

message SwitchModeRequest {
    optional ServerMode sm = 1;
}

message SyncTableRequest {
    optional string name = 1;
    optional string cluster_alias = 2;
    optional uint32 pid = 3;
}

message AddIndexMeta {
    optional string name = 1;
    optional uint32 pid = 2;
    optional rtidb.common.ColumnKey column_key = 3;
    optional uint32 idx = 4;
}

message AddIndexRequest {
    optional string name = 1;
    optional rtidb.common.ColumnKey column_key = 2;
}

message DeleteIndexRequest {
    optional string table_name = 1;
    optional string idx_name = 2;
}

message CreateDatabaseRequest {
    optional string db = 1;
}

message UseDatabaseRequest {
    optional string db = 1;
}

service NameServer {
    rpc CreateTable(CreateTableRequest) returns (GeneralResponse);
    rpc DropTable(DropTableRequest) returns (GeneralResponse);
    rpc ShowTablet(ShowTabletRequest) returns (ShowTabletResponse);
    rpc ShowTable(ShowTableRequest) returns (ShowTableResponse);
    rpc MakeSnapshotNS(MakeSnapshotNSRequest) returns (GeneralResponse);
    rpc AddReplicaNS(AddReplicaNSRequest) returns (GeneralResponse);
    rpc DelReplicaNS(DelReplicaNSRequest) returns (GeneralResponse);
    rpc ShowOPStatus(ShowOPStatusRequest) returns (ShowOPStatusResponse);
    rpc CancelOP(CancelOPRequest) returns (GeneralResponse);
    rpc ConfSet(ConfSetRequest) returns (GeneralResponse);
    rpc ConfGet(ConfGetRequest) returns (ConfGetResponse);
    rpc ChangeLeader(ChangeLeaderRequest) returns (GeneralResponse);
    rpc OfflineEndpoint(OfflineEndpointRequest) returns (GeneralResponse);
    rpc Migrate(MigrateRequest) returns (GeneralResponse);
    rpc RecoverTable(RecoverTableRequest) returns (GeneralResponse);
    rpc RecoverEndpoint(RecoverEndpointRequest) returns (GeneralResponse);
    rpc ConnectZK(ConnectZKRequest) returns (GeneralResponse);
    rpc DisConnectZK(DisConnectZKRequest) returns (GeneralResponse);
    rpc SetTablePartition(SetTablePartitionRequest) returns (GeneralResponse);
    rpc GetTablePartition(GetTablePartitionRequest) returns (GetTablePartitionResponse);
    rpc UpdateTTL(UpdateTTLRequest) returns (UpdateTTLResponse);
    rpc UpdateTableAliveStatus(UpdateTableAliveRequest) returns (GeneralResponse);
    rpc AddTableField(AddTableFieldRequest) returns (GeneralResponse);
    rpc AddReplicaCluster(ClusterAddress) returns (GeneralResponse);
    rpc ShowReplicaCluster(GeneralRequest) returns (ShowReplicaClusterResponse);
    rpc RemoveReplicaCluster(RemoveReplicaOfRequest) returns (GeneralResponse);
    rpc AddReplicaClusterByNs(ReplicaClusterByNsRequest) returns (AddReplicaClusterByNsResponse);
    rpc RemoveReplicaClusterByNs(ReplicaClusterByNsRequest) returns (GeneralResponse);
    rpc SwitchMode(SwitchModeRequest) returns (GeneralResponse);
    rpc GetTaskStatus(rtidb.api.TaskStatusRequest) returns (rtidb.api.TaskStatusResponse);
    rpc DeleteOPTask(rtidb.api.DeleteTaskRequest) returns (rtidb.api.GeneralResponse);
    rpc CreateTableInfo(CreateTableInfoRequest) returns (CreateTableInfoResponse);
    rpc CreateTableInfoSimply(CreateTableInfoRequest) returns (CreateTableInfoResponse);
    rpc LoadTable(LoadTableRequest) returns (GeneralResponse);
    rpc AddReplicaNSFromRemote(AddReplicaNSRequest) returns (GeneralResponse);
    rpc SyncTable(SyncTableRequest) returns (GeneralResponse);
    rpc AddIndex(AddIndexRequest) returns (GeneralResponse);
    rpc DeleteIndex(DeleteIndexRequest) returns (GeneralResponse);
    rpc CreateDatabase(CreateDatabaseRequest) returns (GeneralResponse);
    rpc UseDatabase(UseDatabaseRequest) returns (GeneralResponse);
}
