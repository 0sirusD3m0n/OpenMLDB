name: cicd

on:
  push:
    branches:
      - release/java-sdk-0.4.4-hotfix1
    paths-ignore:
      - docs/
      - demo/
      - image/
      - release/
      - tools/
    tags:
      - v*
  pull_request:
    paths-ignore:
      - docs/
      - demo/
      - image/
      - release/
      - tools/
  workflow_dispatch:

env:
  GIT_SUBMODULE_STRATEGY: recursive
  NPROC: 2 # default Parallel build number for GitHub's Linux runner
  EXAMPLES_ENABLE: OFF # turn off hybridse's example code
  HYBRIDSE_TESTING_ENABLE: OFF # turn off hybridse's test code

jobs:
  java-sdk:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4paradigm/hybridsql:0.4.1
    env:
      SQL_JAVASDK_ENABLE: ON
      OPENMLDB_BUILD_TARGET: 'cp_native_so openmldb'
      MAVEN_OPTS: -Duser.home=/github/home
      SPARK_HOME: /tmp/spark/
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_TOKEN
          gpg-passphrase: GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Import GPG key
        id: import_gpg
        if: github.event_name == 'push'
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('java/**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: prepare release
        if: github.event_name == 'push'
        run: |
          ./java/prepare_release.sh

      - name: build jsdk
        run: |
          make build

      - name: upload linux library
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v2
        with:
          name: shared-library-${{ github.sha }}
          path: |
            java/openmldb-native/src/main/resources/libsql_jsdk.so
            java/hybridse-native/src/main/resources/libhybridse_jsdk_core.so

      - name: start services
        run: |
          sh steps/ut_zookeeper.sh start
          sh steps/download_openmldb_spark.sh $SPARK_HOME
          cd onebox && sh start_onebox.sh && sh start_onebox.sh standalone && cd - || exit

      - name: run java modules smoke test
        working-directory: java
        run: |
          ./mvnw --batch-mode test

      - name: upload java ut results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: linux-ut-result-java-${{ github.sha }}
          path: |
            java/*/target/**/TEST-*.xml

      - name: deploy
        if: github.event_name == 'push'
        working-directory: java
        run: |
          ./mvnw --batch-mode deploy -DskipTests=true -Dscalatest.skip=true
        env:
          MAVEN_OPTS: -Duser.home=/github/home
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: stop services
        run: |
          cd onebox && sh stop_all.sh && cd - || exit
          sh steps/ut_zookeeper.sh stop


  java-sdk-mac:
    # mac job for java sdk. steps are almost same with job 'java-sdk'
    # except mvn deploy won't target all modules, just hybridse-native & openmldb-native
    # the job only run on tag push or manual workflow dispatch due to no test runs
    runs-on: macos-latest
    needs:
      - java-sdk
    if: github.event_name == 'push'
    env:
      SQL_JAVASDK_ENABLE: ON
      OPENMLDB_BUILD_TARGET: 'cp_native_so openmldb'
      NPROC: 3
    steps:
      - uses: actions/checkout@v2

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('java/**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache thirdparty
        uses: actions/cache@v2
        with:
          path: |
            .deps/
            thirdsrc
          key: ${{ runner.os }}-thirdparty-${{ hashFiles('third-party/**/CMakeLists.txt', 'third-party/**/*.cmake', 'third-party/**/*.sh') }}

      - name: prepare release
        if: github.event_name == 'push'
        run: |
          VARIANT_TYPE=macos ./java/prepare_release.sh

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_TOKEN
          gpg-passphrase: GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: build jsdk
        run: |
          make build

      # Need: ut_zookeeper & start_onebox adopted for macOS
      # - name: run java modules smoke test
      #   run: |
      #     sh steps/ut_zookeeper.sh start
      #     cd onebox && sh start_onebox.sh && cd - || exit
      #     cd java
      #     mvn test
      #     cd -
      #     cd onebox && sh stop_all.sh && cd - || exit
      #     sh steps/ut_zookeeper.sh stop

      # - name: upload java ut results
      #   if: always()
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: linux-ut-result-java-${{ github.sha }}
      #     path: |
      #       java/openmldb-jdbc/target/**/TEST-*.xml

      - name: mvn deploy
        working-directory: java
        run: |
          # by convention only native submodule has variant release
          # so it is a bit tricky to compile and deploy that
          # firstly run `maven install` install things locally
          # then selectly `mvn deploy` for hybridse-native & openmldb-native
          ./mvnw --batch-mode clean install -DskipTests=true -Dscalatest.skip=true
          ./mvnw --batch-mode -pl hybridse-native,openmldb-native deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: download shared libraries
        uses: actions/download-artifact@v2
        with:
          name: shared-library-${{ github.sha }}
          path: java

      - name: prepare deploy allinone
        run: |
          VARIANT_TYPE=allinone ./java/prepare_release.sh

      - name: mvn deploy allinone
        working-directory: java
        run: |
          # by convention only native submodule has variant release
          # so it is a bit tricky to compile and deploy that
          # firstly run `maven install` install things locally
          # then selectly `mvn deploy` for hybridse-native & openmldb-native
          ./mvnw --batch-mode clean install -DskipTests=true -Dscalatest.skip=true
          ./mvnw --batch-mode -pl hybridse-native,openmldb-native deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

